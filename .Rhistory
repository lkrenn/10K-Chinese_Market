}
myseed<-4*sum(num_vowels)+t(c(100,200,300,400,500))%*%num_vowels
set.seed(myseed)
set.seed(1728)
ncol(Hitters)
train = sample (1: nrow(Hitters), 0.75*nrow(Hitters))
length(train)
hitters.test=Hitters[-train,"logSalary"]
bag.hitters=randomForest(logSalary~.,data=Hitters,subset=train,mtry=19,importance=TRUE)
bag.hitters
yhat.bag = predict(bag.hitters,newdata=Hitters[-train,])
mean((yhat.bag-hitters.test)^2)
########## m = 4
bag1.hitters=randomForest(logSalary~.,data=Hitters,subset=train,mtry=4,importance=TRUE)
yhat.bag1 = predict(bag1.hitters,newdata=Hitters[-train,])
########## m = 6
bag2.hitters=randomForest(logSalary~.,data=Hitters,subset=train,mtry=6,importance=TRUE)
yhat.bag2 = predict(bag2.hitters,newdata=Hitters[-train,])
########## m = 8
bag3.hitters=randomForest(logSalary~.,data=Hitters,subset=train,mtry=8,importance=TRUE)
yhat.bag3 = predict(bag3.hitters,newdata=Hitters[-train,])
print(c(mean((yhat.bag1-hitters.test)^2), mean((yhat.bag2-hitters.test)^2), mean((yhat.bag3-hitters.test)^2)))
########## depth = 4
library(gbm)
boost1.hitters=gbm(logSalary~.,data=Hitters[train,],distribution="gaussian",n.trees=5000,interaction.depth=4)
yhat.boost1=predict(boost1.hitters,newdata=Hitters[-train,],n.trees=5000)
########## depth = 5
boost2.hitters=gbm(logSalary~.,data=Hitters[train,],distribution="gaussian",n.trees=5000,interaction.depth=5)
yhat.boost2=predict(boost2.hitters,newdata=Hitters[-train,],n.trees=5000)
########## depth = 6
boost3.hitters=gbm(logSalary~.,data=Hitters[train,],distribution="gaussian",n.trees=5000,interaction.depth=6)
yhat.boost3=predict(boost3.hitters,newdata=Hitters[-train,],n.trees=5000)
print(c(mean((yhat.boost1-hitters.test)^2), mean((yhat.boost2-hitters.test)^2), mean((yhat.boost3-hitters.test)^2)))
varImpPlot(bag2.hitters)
library(stringr)
name<-"Lucas Krenn"
thevowels = c("a","e","i","o","u")
num_vowels = vector(mode="integer", length=5)
for (i in seq_along(thevowels)) {
temp = str_count(tolower(name), thevowels[i])
num_vowels[i] = sum(temp)
}
myseed<-4*sum(num_vowels)+t(c(100,200,300,400,500))%*%num_vowels
set.seed(myseed)
ncol(Hitters)
train = sample (1: nrow(Hitters), 0.75*nrow(Hitters))
length(train)
hitters.test=Hitters[-train,"logSalary"]
bag.hitters=randomForest(logSalary~.,data=Hitters,subset=train,mtry=19,importance=TRUE)
bag.hitters
yhat.bag = predict(bag.hitters,newdata=Hitters[-train,])
mean((yhat.bag-hitters.test)^2)
########## m = 4
bag1.hitters=randomForest(logSalary~.,data=Hitters,subset=train,mtry=4,importance=TRUE)
yhat.bag1 = predict(bag1.hitters,newdata=Hitters[-train,])
########## m = 6
bag2.hitters=randomForest(logSalary~.,data=Hitters,subset=train,mtry=6,importance=TRUE)
yhat.bag2 = predict(bag2.hitters,newdata=Hitters[-train,])
########## m = 8
bag3.hitters=randomForest(logSalary~.,data=Hitters,subset=train,mtry=8,importance=TRUE)
yhat.bag3 = predict(bag3.hitters,newdata=Hitters[-train,])
# List of MSEs
print(c(mean((yhat.bag1-hitters.test)^2), mean((yhat.bag2-hitters.test)^2), mean((yhat.bag3-hitters.test)^2)))
########## depth = 4
library(gbm)
boost1.hitters=gbm(logSalary~.,data=Hitters[train,],distribution="gaussian",n.trees=5000,interaction.depth=4)
yhat.boost1=predict(boost1.hitters,newdata=Hitters[-train,],n.trees=5000)
########## depth = 5
boost2.hitters=gbm(logSalary~.,data=Hitters[train,],distribution="gaussian",n.trees=5000,interaction.depth=5)
yhat.boost2=predict(boost2.hitters,newdata=Hitters[-train,],n.trees=5000)
########## depth = 6
boost3.hitters=gbm(logSalary~.,data=Hitters[train,],distribution="gaussian",n.trees=5000,interaction.depth=6)
yhat.boost3=predict(boost3.hitters,newdata=Hitters[-train,],n.trees=5000)
print(c(mean((yhat.boost1-hitters.test)^2), mean((yhat.boost2-hitters.test)^2), mean((yhat.boost3-hitters.test)^2)))
knitr::opts_chunk$set(echo = TRUE)
SD <- c(1.7321388, 0.9672748, 0.4933697, 0.4412015, 0.2919107, 0.1884534)
eigenvalues <- SD^2
eigenvalues
SD <- c(1.7321388, 0.9672748, 0.4933697, 0.4412015, 0.2919107, 0.1884534)
eigenvalues <- SD^2
(eigenvalues/ sum(eigenvalues))
# Create list of standard deviations
SD <- c(1.7321388, 0.9672748, 0.4933697, 0.4412015, 0.2919107, 0.1884534)
# Square the standard deviations to get eigenvalues
eigenvalues <- SD^2
# Output the proportion explained
prop <- (eigenvalues/ sum(eigenvalues))
prop
cumsum(prop)
plot(cumsum(prop))
plot(1 - cumsum(prop))
library(ggplot)
library(ggplot2)
library(ggplot2)
plot(1 - cumsum(prop))
gplot(cumsum(prop), aes(x=index, y=value))
library(ggplot2)
ggplot(cumsum(prop), aes(x=index, y=value))
library(ggplot2)
ggplot(as.DataFrame(cumsum(prop)), aes(x=index, y=value))
library(ggplot2)
plot(1-cumsum(prop))
plot(1-cumsum(prop))
# Create list of standard deviations
SD <- c(1.7321388, 0.9672748, 0.4933697, 0.4412015, 0.2919107, 0.1884534)
# Square the standard deviations to get eigenvalues
eigenvalues <- SD^2
# Output the proportion explained
prop <- (eigenvalues/ sum(eigenvalues))
prop
plot(1-cumsum(prop))
plot(1-cumsum(prop))
cumsum(prop)
for (j in 0:5){
print(j)
}
Ans_list = []
Ans_list = {}
for (j in 0:5){
Ans_list[j] = j
}
Ans_list = {}
for (j in 0:5){
Ans_list[j] = j
}
Ans_list
Ans_list = {}
for (j in 0:6){
n = 10^(j-1)
Ans_list[j] = 2^n + 1 - 2^n
}
Ans_list
Ans_list = {}
for (j in 0:6){
n = 10**(j-1)
Ans_list[j] = 2^n + 1 - 2^n
}
Ans_list
2**(10**5)
2**(10**4)
2**(10**3)
2**(10**4)
2,147,483,647 + 1
2147483647 + 1
2147483647 + 2
4294967295 + 2
2^31
2^32
2^33
2^34
2^35
2^40
2^45
2^64
2^65
.Machine$integer.max
.Machine$integer.max + 1
x = .Machine$integer.max
x
x = .Machine$integer.max +1
x
x = .Machine$integer.max +1
2*10^9
x = .Machine$integer.max +1
2*10^10
x = .Machine$integer.max +1
2*10^11
x = .Machine$integer.max +1
2*10^11 + 1
x = .Machine$integer.max +1
2*10^12
x = .Machine$integer.max +1
2*10^15
Ans_list = {}
for (j in 0:6){
n = 10^(j-1)
Ans_list[j] = 2^n + 1 - 2^n
}
Ans_list
Ans_list = {}
for (j in 0:6){
n = 10**(j-1)
Ans_list[j] = 2**n + 1 - 2**n
}
Ans_list
Ans_list = {}
for (j in 0:6){
n = 10**(j-1)
Ans_list[j] = 2**n + 1 - 2**n
}
Ans_list
Ans_list = {}
for (j in 0:6){
n = 10**(j-1)
Ans_list[j] = 2**n + 1 - 2**n
}
Ans_list
2**(10**4)
2**(10**4)
x = .Machine$integer.max +1
x = .Machine$integer.max +1
x
x = .Machine$integer.max +1
x + 1 - x
x = .Machine$integer.max - 10**3
x = .Machine$integer.max - 10**3
x
x = .Machine$integer.max - 10**4
x
x = .Machine$integer.max - 2**10**3
x
x = 2**.Machine$integer.max
x
x = 2**.Machine$integer.max-1
x
x = 2**(.Machine$integer.max-1)
x
x = 2**(.Machine$integer.max-2**10)
x
2**31
2**31 + 1
.Machine$integer.max + 1 - .Machine$integer.max
Ans_list[7] = .Machine$integer.max
Ans_list
Ans_list[7] = .Machine$integer.max + 1
Ans_list
Ans_list[7] = 2**.Machine$integer.max
Ans_list
Ans_list[7] = 2**.Machine$integer.max  - 2**.Machine$integer.max
Ans_list
Ans_list[7] = 2**(.Machine$integer.max-1)  - 2**(.Machine$integer.max-1)
Ans_list
Ans_list[7] = 2**(.Machine$integer.max-100000)  - 2**(.Machine$integer.max-100000)
Ans_list
as.integer(.Machine$integer.max)
as.integer(.Machine$integer.max + 1)
as.integer(2147483647 + 1)
as.integer(2147483647 + 1)
2**(10**2)
as.integer(2**(10**2))
typeof(2**(10**2))
Ans_list = {}
for (j in 0:6){
n = 10**(j-1)
Ans_list[j] = 2**n + 1 - 2**n
}
Ans_list
typeof(2**(10**2))
as.integer(2147483647 + 1)
install.packages(reticulate)
install.packages("reticulate"")
install.packages("reticulate")
package("reticulate")
library("reticulate")
library("reticulate")
Ans_list = {}
for (j in 0:6){
n = 10**(j-1)
Ans_list[j] = 2**n + 1 - 2**n
}
Ans_list
typeof(2**(10**2))
as.integer(2147483647 + 1)
library("reticulate")
knitr::knit_engines$set(python = reticulate::eng_python)
library("reticulate")
knitr::knit_engines$set(python = reticulate::eng_python)
Ans_list = {}
for (j in 0:6){
n = 10**(j-1)
Ans_list[j] = 2**n + 1 - 2**n
}
Ans_list
typeof(2**(10**2))
as.integer(2147483647 + 1)
pip install matplotlib --upgrade
py -m pip install --upgrade pip
library("reticulate")
knitr::knit_engines$set(python = reticulate::eng_python)
Ans_list = {}
for (j in 0:6){
n = 10**(j-1)
Ans_list[j] = 2**n + 1 - 2**n
}
Ans_list
typeof(2**(10**2))
as.integer(2147483647 + 1)
library("reticulate")
knitr::knit_engines$set(python = reticulate::eng_python)
py_install("matplotlib")
Y
library("reticulate")
knitr::knit_engines$set(python = reticulate::eng_python)
2**16
# Initialize empty dataframe
Ans_df <- data.frame("n" = c("10^0", "10^2", "10^3", "10^4", "10^5"),
"Result" = c(0,0,0,0,0),
"Type" = c("unpopulated", "unpopulated", "unpopulated", "unpopulated", "unpopulated"))
# Populate array
for (j in 0:6){
n = 10**(j-1)
calc = 2**n + 1 - 2**n
Ans_df["Result",j] = calc
Ans_df["Type", j] = typeof(calc)
}
# Initialize empty dataframe
Ans_df <- data.frame("n" = c("10^0", "10^2", "10^3", "10^4", "10^5"),
"Result" = c(0,0,0,0,0),
"Type" = c("unpopulated", "unpopulated", "unpopulated", "unpopulated", "unpopulated"))
# Populate array
for (j in 0:6){
n = 10**(j-1)
calc = 2**n + 1 - 2**n
Ans_df["Result"][j] = calc
Ans_df["Type"][j] = typeof(calc)
}
# Initialize empty dataframe
Ans_df <- data.frame("n" = c("10^0", "10^2", "10^3", "10^4", "10^5"),
"Result" = c(0,0,0,0,0),
"Type" = c("unpopulated", "unpopulated", "unpopulated", "unpopulated", "unpopulated"))
# Populate array
for (j in 0:6){
n = 10**(j-1)
calc = 2**n + 1 - 2**n
Ans_df["Result"][j+1] = calc
Ans_df["Type"][j+1] = typeof(calc)
}
# Initialize empty dataframe
Ans_df <- data.frame("n" = c("10^0", "10^2", "10^3", "10^4", "10^5"),
"Result" = c(0,0,0,0,0),
"Type" = c("unpopulated", "unpopulated", "unpopulated", "unpopulated", "unpopulated"))
# Populate array
for (j in 0:6){
n = 10**(j-1)
calc = 2**n + 1 - 2**n
Ans_df.at["Result", j+1] = calc
Ans_df.at["Type", j+1] = typeof(calc)
}
# Initialize empty dataframe
Ans_df <- data.frame("n" = c("10^0", "10^2", "10^3", "10^4", "10^5"),
"Result" = c(0,0,0,0,0),
"Type" = c("unpopulated", "unpopulated", "unpopulated", "unpopulated", "unpopulated"))
# Populate array
for (j in 0:6){
n <- 10**(j-1)
calc <- 2**n + 1 - 2**n
Ans_df.at[j,"Result"] <- calc
Ans_df.at[j,"Type"] <- typeof(calc)
}
# Initialize empty dataframe
Ans_df <- data.frame("n" = c("10^0", "10^2", "10^3", "10^4", "10^5"),
"Result" = c(0,0,0,0,0),
"Type" = c("unpopulated", "unpopulated", "unpopulated", "unpopulated", "unpopulated"))
# Populate array
for (j in 0:6){
n <- 10**(j-1)
calc <- 2**n + 1 - 2**n
Ans_df[j,"Result"] <- calc
Ans_df[j,"Type"] <- typeof(calc)
}
# Print results
Ans_list
# Initialize empty dataframe
Ans_df <- data.frame("n" = c("10^0", "10^2", "10^3", "10^4", "10^5"),
"Result" = c(0,0,0,0,0),
"Type" = c("unpopulated", "unpopulated", "unpopulated", "unpopulated", "unpopulated"))
# Populate array
for (j in 0:6){
n <- 10**(j-1)
calc <- 2**n + 1 - 2**n
Ans_df[j,"Result"] <- calc
Ans_df[j,"Type"] <- typeof(calc)
}
# Print results
Ans_df
# Initialize empty dataframe
Ans_df <- data.frame("n" = c("10^0", "10^2", "10^3", "10^4", "10^5"),
"Result" = c(0,0,0,0,0),
"Type" = c("unpopulated", "unpopulated", "unpopulated", "unpopulated", "unpopulated"))
# Populate array
for (j in 0:6){
n <- 10**(j-1)
calc <- 2**n + 1 - 2**n
Ans_df[j,"Result"] <- calc
Ans_df[j,"Type"] <- as.string(typeof(calc))
}
# Initialize empty dataframe
Ans_df <- data.frame("n" = c("10^0", "10^2", "10^3", "10^4", "10^5"),
"Result" = c(0,0,0,0,0),
"Type" = c("unpopulated", "unpopulated", "unpopulated", "unpopulated", "unpopulated"))
# Populate array
for (j in 0:6){
n <- 10**(j-1)
calc <- 2**n + 1 - 2**n
Ans_df[j,"Result"] <- calc
Ans_df[j,"Type"] <- as.str(typeof(calc))
}
# Initialize empty dataframe
Ans_df <- data.frame("n" = c("10^0", "10^2", "10^3", "10^4", "10^5"),
"Result" = c(0,0,0,0,0),
"Type" = c("unpopulated", "unpopulated", "unpopulated", "unpopulated", "unpopulated"))
# Populate array
for (j in 0:6){
n <- 10**(j-1)
calc <- 2**n + 1 - 2**n
Ans_df[j,"Result"] <- calc
Ans_df[j,"Type"] <- toString(typeof(calc))
}
# Print results
Ans_df
# Initialize empty dataframe
Ans_df <- data.frame(matrix(ncol=3, nrow=5))
colnames(Ans_df) <- c("n", "Result", "Data Type")
# Populate array
for (j in 0:5){
n <- 10**(j-1)
calc <- 2**n + 1 - 2**n
Ans_df[j,"Result"] <- calc
Ans_df[j,"Type"] <- toString(typeof(calc))
}
# Print results
Ans_df
# Initialize empty dataframe
Ans_df <- data.frame(matrix(ncol=3, nrow=5))
colnames(Ans_df) <- c("n", "Result", "Type")
# Populate array
for (j in 0:5){
n <- 10**(j-1)
calc <- 2**n + 1 - 2**n
Ans_df[j, "n"] <- "10^" + toString(j)
Ans_df[j,"Result"] <- calc
Ans_df[j,"Type"] <- toString(typeof(calc))
}
# Initialize empty dataframe
Ans_df <- data.frame(matrix(ncol=3, nrow=5))
colnames(Ans_df) <- c("n", "Result", "Type")
# Populate array
for (j in 0:5){
n <- 10**(j-1)
calc <- 2**n + 1 - 2**n
Ans_df[j, "n"] <- paste("10^", toString(j))
Ans_df[j,"Result"] <- calc
Ans_df[j,"Type"] <- toString(typeof(calc))
}
# Print results
Ans_df
# Initialize empty dataframe
Ans_df <- data.frame(matrix(ncol=3, nrow=5))
colnames(Ans_df) <- c("n", "Result", "Type")
# Populate array
for (j in 0:5){
n <- 10**(j-1)
calc <- 2**n + 1 - 2**n
Ans_df[j-1, "n"] <- paste("10^", toString(j))
Ans_df[j,"Result"] <- calc
Ans_df[j,"Type"] <- toString(typeof(calc))
}
# Print results
Ans_df
# Initialize empty dataframe
Ans_df <- data.frame(matrix(ncol=3, nrow=5))
colnames(Ans_df) <- c("n", "Result", "Type")
# Populate array
for (j in 0:5){
n <- 10**(j-1)
calc <- 2**n + 1 - 2**n
Ans_df[j, "n"] <- paste("10^", toString(j-1))
Ans_df[j,"Result"] <- calc
Ans_df[j,"Type"] <- toString(typeof(calc))
}
# Print results
Ans_df
# Used to add python capability to an RMarkdown file
library("reticulate")
knitr::knit_engines$set(python = reticulate::eng_python)
# Used to add python capability to an RMarkdown file
library("reticulate")
knitr::knit_engines$set(python = reticulate::eng_python)
# Used to add python capability to an RMarkdown file
library("reticulate")
py_install("pandas")
knitr::knit_engines$set(python = reticulate::eng_python)
# Used to add python capability to an RMarkdown file
library("reticulate")
knitr::knit_engines$set(python = reticulate::eng_python)
py_install("optionprice")
library(reticulate)
py_install("optionprice")
# Used to add python capability to an RMarkdown file
library("reticulate")
# install SciPy
conda_install("r-reticulate", "optionprice")
# Used to add python capability to an RMarkdown file
library("reticulate")
use_python("/Users/lucaskrenn/opt/anaconda3/bin/python3.7", required = T) # Locate and run Python
knitr::knit_engines$set(python = reticulate::eng_python)
# Used to add python capability to an RMarkdown file
library("reticulate")
use_python("/Users/lucaskrenn/opt/anaconda3/bin/python", required = T) # Locate and run Python
knitr::knit_engines$set(python = reticulate::eng_python)
img <- readPNG('thumbnail_3bi2.png')
# Used to add python capability to an RMarkdown file
library("reticulate")
use_python("/Users/lucaskrenn/opt/anaconda3/bin/python", required = T) # Locate and run Python
knitr::knit_engines$set(python = reticulate::eng_python)
library("rhdf5")
setwd("~/Documents/Chinese_Project/10K-Chinese_Market")
setwd("~/Documents/Chinese_Project/10K-Chinese_Market")
setwd("~/Documents/Chinese_Project/10K-Chinese_Market")
data <- readRDS("../dailyChina.RDS")
h5write(data, "dailyChina.h5","foo/A")
View(data)
